'use strict';

var _powerAssertVisitorKeys = '{"ArrayExpression":["elements"],"AssignmentExpression":["left","right"],"BinaryExpression":["left","right"],"Directive":["value"],"DirectiveLiteral":[],"BlockStatement":["directives","body"],"BreakStatement":["label"],"CallExpression":["callee","arguments"],"CatchClause":["param","body"],"ConditionalExpression":["test","consequent","alternate"],"ContinueStatement":["label"],"DebuggerStatement":[],"DoWhileStatement":["test","body"],"EmptyStatement":[],"ExpressionStatement":["expression"],"File":["program"],"ForInStatement":["left","right","body"],"ForStatement":["init","test","update","body"],"FunctionDeclaration":["id","params","body","returnType","typeParameters"],"FunctionExpression":["id","params","body","returnType","typeParameters"],"Identifier":["typeAnnotation"],"IfStatement":["test","consequent","alternate"],"LabeledStatement":["label","body"],"StringLiteral":[],"NumericLiteral":[],"NullLiteral":[],"BooleanLiteral":[],"RegExpLiteral":[],"LogicalExpression":["left","right"],"MemberExpression":["object","property"],"NewExpression":["callee","arguments"],"Program":["directives","body"],"ObjectExpression":["properties"],"ObjectMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectProperty":["key","value","decorators"],"RestElement":["argument","typeAnnotation"],"ReturnStatement":["argument"],"SequenceExpression":["expressions"],"SwitchCase":["test","consequent"],"SwitchStatement":["discriminant","cases"],"ThisExpression":[],"ThrowStatement":["argument"],"TryStatement":["block","handler","finalizer"],"UnaryExpression":["argument"],"UpdateExpression":["argument"],"VariableDeclaration":["declarations"],"VariableDeclarator":["id","init"],"WhileStatement":["test","body"],"WithStatement":["object","body"],"AssignmentPattern":["left","right"],"ArrayPattern":["elements","typeAnnotation"],"ArrowFunctionExpression":["params","body","returnType","typeParameters"],"ClassBody":["body"],"ClassDeclaration":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ClassExpression":["id","body","superClass","mixins","typeParameters","superTypeParameters","implements","decorators"],"ExportAllDeclaration":["source"],"ExportDefaultDeclaration":["declaration"],"ExportNamedDeclaration":["declaration","specifiers","source"],"ExportSpecifier":["local","exported"],"ForOfStatement":["left","right","body"],"ImportDeclaration":["specifiers","source"],"ImportDefaultSpecifier":["local"],"ImportNamespaceSpecifier":["local"],"ImportSpecifier":["local","imported"],"MetaProperty":["meta","property"],"ClassMethod":["key","params","body","decorators","returnType","typeParameters"],"ObjectPattern":["properties","typeAnnotation"],"SpreadElement":["argument"],"Super":[],"TaggedTemplateExpression":["tag","quasi"],"TemplateElement":[],"TemplateLiteral":["quasis","expressions"],"YieldExpression":["argument"],"AnyTypeAnnotation":[],"ArrayTypeAnnotation":["elementType"],"BooleanTypeAnnotation":[],"BooleanLiteralTypeAnnotation":[],"NullLiteralTypeAnnotation":[],"ClassImplements":["id","typeParameters"],"ClassProperty":["key","value","typeAnnotation","decorators"],"DeclareClass":["id","typeParameters","extends","body"],"DeclareFunction":["id"],"DeclareInterface":["id","typeParameters","extends","body"],"DeclareModule":["id","body"],"DeclareModuleExports":["typeAnnotation"],"DeclareTypeAlias":["id","typeParameters","right"],"DeclareOpaqueType":["id","typeParameters","supertype"],"DeclareVariable":["id"],"DeclareExportDeclaration":["declaration","specifiers","source"],"ExistentialTypeParam":[],"FunctionTypeAnnotation":["typeParameters","params","rest","returnType"],"FunctionTypeParam":["name","typeAnnotation"],"GenericTypeAnnotation":["id","typeParameters"],"InterfaceExtends":["id","typeParameters"],"InterfaceDeclaration":["id","typeParameters","extends","body"],"IntersectionTypeAnnotation":["types"],"MixedTypeAnnotation":[],"EmptyTypeAnnotation":[],"NullableTypeAnnotation":["typeAnnotation"],"NumericLiteralTypeAnnotation":[],"NumberTypeAnnotation":[],"StringLiteralTypeAnnotation":[],"StringTypeAnnotation":[],"ThisTypeAnnotation":[],"TupleTypeAnnotation":["types"],"TypeofTypeAnnotation":["argument"],"TypeAlias":["id","typeParameters","right"],"OpaqueType":["id","typeParameters","impltype","supertype"],"TypeAnnotation":["typeAnnotation"],"TypeCastExpression":["expression","typeAnnotation"],"TypeParameter":["bound"],"TypeParameterDeclaration":["params"],"TypeParameterInstantiation":["params"],"ObjectTypeAnnotation":["properties","indexers","callProperties"],"ObjectTypeCallProperty":["value"],"ObjectTypeIndexer":["id","key","value"],"ObjectTypeProperty":["key","value"],"ObjectTypeSpreadProperty":["argument"],"QualifiedTypeIdentifier":["id","qualification"],"UnionTypeAnnotation":["types"],"VoidTypeAnnotation":[],"JSXAttribute":["name","value"],"JSXClosingElement":["name"],"JSXElement":["openingElement","children","closingElement"],"JSXEmptyExpression":[],"JSXExpressionContainer":["expression"],"JSXSpreadChild":["expression"],"JSXIdentifier":[],"JSXMemberExpression":["object","property"],"JSXNamespacedName":["namespace","name"],"JSXOpeningElement":["name","attributes"],"JSXSpreadAttribute":["argument"],"JSXText":[],"Noop":[],"ParenthesizedExpression":["expression"],"AwaitExpression":["argument"],"ForAwaitStatement":["left","right","body"],"BindExpression":["object","callee"],"Import":[],"Decorator":["expression"],"DoExpression":["body"],"ExportDefaultSpecifier":["exported"],"ExportNamespaceSpecifier":["exported"],"RestProperty":["argument"],"SpreadProperty":["argument"]}',
    _powerAssertRecorder = function () { function PowerAssertRecorder() { this.captured = []; } PowerAssertRecorder.prototype._capt = function _capt(value, espath) { this.captured.push({ value: value, espath: espath }); return value; }; PowerAssertRecorder.prototype._expr = function _expr(value, source) { var capturedValues = this.captured; this.captured = []; return { powerAssertContext: { value: value, events: capturedValues }, source: source }; }; return PowerAssertRecorder; }();

const fs = require('fs');
const test = require('ava');
const TeleBot = require('../lib/telebot.js');

// Globals
var bot;

// Enviroment data

let {
    TEST_TELEBOT_TOKEN: TOKEN,
    TEST_TELEBOT_USER: USER
} = process.env;

test('bot environment', t => {
    var _rec = new _powerAssertRecorder(),
        _rec2 = new _powerAssertRecorder();

    t.true(_rec._expr(_rec._capt(!_rec._capt(!_rec._capt(TOKEN, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
        content: 't.true(!!TOKEN, \'TEST_TELEBOT_TOKEN required\')',
        filepath: 'index.js',
        line: 17,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"TOKEN","range":[9,14]},"prefix":true,"range":[8,14]},"prefix":true,"range":[7,14]},{"type":"StringLiteral","value":"TEST_TELEBOT_TOKEN required","range":[16,45]}],"range":[0,46]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"TOKEN","range":[9,14]},{"type":{"label":","},"range":[14,15]},{"type":{"label":"string"},"value":"TEST_TELEBOT_TOKEN required","range":[16,45]},{"type":{"label":")"},"range":[45,46]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'TEST_TELEBOT_TOKEN required');
    t.true(_rec2._expr(_rec2._capt(!_rec2._capt(!_rec2._capt(USER, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
        content: 't.true(!!USER, \'TEST_TELEBOT_USER required\')',
        filepath: 'index.js',
        line: 18,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"USER","range":[9,13]},"prefix":true,"range":[8,13]},"prefix":true,"range":[7,13]},{"type":"StringLiteral","value":"TEST_TELEBOT_USER required","range":[15,43]}],"range":[0,44]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"USER","range":[9,13]},{"type":{"label":","},"range":[13,14]},{"type":{"label":"string"},"value":"TEST_TELEBOT_USER required","range":[15,43]},{"type":{"label":")"},"range":[43,44]}]',
        visitorKeys: _powerAssertVisitorKeys
    }), 'TEST_TELEBOT_USER required');
});

test('bot object', t => {
    var _rec3 = new _powerAssertRecorder();

    const newSet = {
        token: TOKEN,
        polling: {
            interval: 100,
            limit: 50,
            timeout: 0,
            retryTimeout: 5000
        }
    };

    function check(bot) {
        t.is(bot.token, TOKEN);
        t.is(bot.id, TOKEN.split(':')[0]);
    }

    check(new TeleBot(TOKEN));
    check(bot = new TeleBot(newSet));

    for (let name in newSet.polling) {
        t.is(bot[name], newSet.polling[name]);
    }

    // Start
    bot.start();
    t.not(bot.loopFn, null);
    t.deepEqual(bot.flags, { looping: true, poll: false, retry: false });

    // Stop
    bot.stop();
    t.false(_rec3._expr(_rec3._capt(_rec3._capt(_rec3._capt(bot, 'arguments/0/object/object').flags, 'arguments/0/object').looping, 'arguments/0'), {
        content: 't.false(bot.flags.looping)',
        filepath: 'index.js',
        line: 53,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"MemberExpression","object":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[8,11]},"property":{"type":"Identifier","name":"flags","range":[12,17]},"computed":false,"range":[8,17]},"property":{"type":"Identifier","name":"looping","range":[18,25]},"computed":false,"range":[8,25]}],"range":[0,26]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"bot","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"flags","range":[12,17]},{"type":{"label":"."},"range":[17,18]},{"type":{"label":"name"},"value":"looping","range":[18,25]},{"type":{"label":")"},"range":[25,26]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
});

test('events', t => {
    var _rec4 = new _powerAssertRecorder(),
        _rec5 = new _powerAssertRecorder(),
        _rec6 = new _powerAssertRecorder();

    t.plan(9);

    function len(event) {
        return bot.eventList.get(event).list.length;
    }

    function count() {
        return bot.eventList.size;
    }

    var delMe = () => {};

    t.is(count(), 2);

    // Set
    bot.on('start', () => {});
    bot.on('start', delMe);
    bot.on('custom', () => {});
    bot.on('custom', () => {});
    bot.on('custom', () => {});

    // Count
    t.is(len('custom'), 3);
    t.is(len('start'), 2);
    t.is(count(), 3);

    // Remove
    t.true(_rec4._expr(_rec4._capt(_rec4._capt(bot, 'arguments/0/callee/object').removeEvent('start', _rec4._capt(delMe, 'arguments/0/arguments/1')), 'arguments/0'), {
        content: 't.true(bot.removeEvent(\'start\', delMe))',
        filepath: 'index.js',
        line: 91,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[7,10]},"property":{"type":"Identifier","name":"removeEvent","range":[11,22]},"computed":false,"range":[7,22]},"arguments":[{"type":"StringLiteral","value":"start","range":[23,30]},{"type":"Identifier","name":"delMe","range":[32,37]}],"range":[7,38]}],"range":[0,39]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"bot","range":[7,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"removeEvent","range":[11,22]},{"type":{"label":"("},"range":[22,23]},{"type":{"label":"string"},"value":"start","range":[23,30]},{"type":{"label":","},"range":[30,31]},{"type":{"label":"name"},"value":"delMe","range":[32,37]},{"type":{"label":")"},"range":[37,38]},{"type":{"label":")"},"range":[38,39]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
    t.is(len('start'), 1);

    // Clean
    t.true(_rec5._expr(_rec5._capt(_rec5._capt(bot, 'arguments/0/callee/object').cleanEvent('custom'), 'arguments/0'), {
        content: 't.true(bot.cleanEvent(\'custom\'))',
        filepath: 'index.js',
        line: 95,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[7,10]},"property":{"type":"Identifier","name":"cleanEvent","range":[11,21]},"computed":false,"range":[7,21]},"arguments":[{"type":"StringLiteral","value":"custom","range":[22,30]}],"range":[7,31]}],"range":[0,32]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"bot","range":[7,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"cleanEvent","range":[11,21]},{"type":{"label":"("},"range":[21,22]},{"type":{"label":"string"},"value":"custom","range":[22,30]},{"type":{"label":")"},"range":[30,31]},{"type":{"label":")"},"range":[31,32]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    // Destroy
    t.true(_rec6._expr(_rec6._capt(_rec6._capt(bot, 'arguments/0/callee/object').destroyEvent('custom'), 'arguments/0'), {
        content: 't.true(bot.destroyEvent(\'custom\'))',
        filepath: 'index.js',
        line: 98,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[7,10]},"property":{"type":"Identifier","name":"destroyEvent","range":[11,23]},"computed":false,"range":[7,23]},"arguments":[{"type":"StringLiteral","value":"custom","range":[24,32]}],"range":[7,33]}],"range":[0,34]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"bot","range":[7,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"destroyEvent","range":[11,23]},{"type":{"label":"("},"range":[23,24]},{"type":{"label":"string"},"value":"custom","range":[24,32]},{"type":{"label":")"},"range":[32,33]},{"type":{"label":")"},"range":[33,34]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
    t.is(count(), 2);
});

test('mods', t => {
    var _rec7 = new _powerAssertRecorder(),
        _rec8 = new _powerAssertRecorder(),
        _rec9 = new _powerAssertRecorder();

    const defModCount = bot.buildInPlugins.length + bot.usePlugins.length;

    function len(event) {
        return bot.modList[event].length;
    }

    var delMe = x => x;

    t.is(all(bot.modList), defModCount);

    // Set
    bot.mod('custom', x => ++x);
    bot.mod('custom', x => ++x);
    bot.mod('custom', delMe);
    bot.mod('custom', x => ++x);

    // Count
    t.is(len('custom'), 4);
    t.is(all(bot.modList), 1 + defModCount);

    // Run
    t.is(bot.modRun('custom', 5), 8);

    // Remove
    t.true(_rec7._expr(_rec7._capt(_rec7._capt(bot, 'arguments/0/callee/object').removeMod('custom', _rec7._capt(delMe, 'arguments/0/arguments/1')), 'arguments/0'), {
        content: 't.true(bot.removeMod(\'custom\', delMe))',
        filepath: 'index.js',
        line: 129,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[7,10]},"property":{"type":"Identifier","name":"removeMod","range":[11,20]},"computed":false,"range":[7,20]},"arguments":[{"type":"StringLiteral","value":"custom","range":[21,29]},{"type":"Identifier","name":"delMe","range":[31,36]}],"range":[7,37]}],"range":[0,38]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"bot","range":[7,10]},{"type":{"label":"."},"range":[10,11]},{"type":{"label":"name"},"value":"removeMod","range":[11,20]},{"type":{"label":"("},"range":[20,21]},{"type":{"label":"string"},"value":"custom","range":[21,29]},{"type":{"label":","},"range":[29,30]},{"type":{"label":"name"},"value":"delMe","range":[31,36]},{"type":{"label":")"},"range":[36,37]},{"type":{"label":")"},"range":[37,38]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
    t.false(_rec8._expr(_rec8._capt(_rec8._capt(bot, 'arguments/0/callee/object').removeMod('custom'), 'arguments/0'), {
        content: 't.false(bot.removeMod(\'custom\'))',
        filepath: 'index.js',
        line: 130,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[8,11]},"property":{"type":"Identifier","name":"removeMod","range":[12,21]},"computed":false,"range":[8,21]},"arguments":[{"type":"StringLiteral","value":"custom","range":[22,30]}],"range":[8,31]}],"range":[0,32]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"bot","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"removeMod","range":[12,21]},{"type":{"label":"("},"range":[21,22]},{"type":{"label":"string"},"value":"custom","range":[22,30]},{"type":{"label":")"},"range":[30,31]},{"type":{"label":")"},"range":[31,32]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));
    t.false(_rec9._expr(_rec9._capt(_rec9._capt(bot, 'arguments/0/callee/object').removeMod('not_found'), 'arguments/0'), {
        content: 't.false(bot.removeMod(\'not_found\'))',
        filepath: 'index.js',
        line: 131,
        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"false","range":[2,7]},"computed":false,"range":[0,7]},"arguments":[{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[8,11]},"property":{"type":"Identifier","name":"removeMod","range":[12,21]},"computed":false,"range":[8,21]},"arguments":[{"type":"StringLiteral","value":"not_found","range":[22,33]}],"range":[8,34]}],"range":[0,35]}',
        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"false"},"value":"false","range":[2,7]},{"type":{"label":"("},"range":[7,8]},{"type":{"label":"name"},"value":"bot","range":[8,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"removeMod","range":[12,21]},{"type":{"label":"("},"range":[21,22]},{"type":{"label":"string"},"value":"not_found","range":[22,33]},{"type":{"label":")"},"range":[33,34]},{"type":{"label":")"},"range":[34,35]}]',
        visitorKeys: _powerAssertVisitorKeys
    }));

    t.is(len('custom'), 3);
    t.is(all(bot.modList), 1 + defModCount);
});

test('bot.answerList', t => {

    const id = 8;

    const opt = {
        cacheTime: 200,
        nextOffset: 3457,
        personal: true
    };

    const answers = bot.answerList(id, opt);

    t.is(answers.id, id);

    for (let key in opt) {
        t.is(answers[key], opt[key]);
    }
});

test('bot.getMe', t => {
    return bot.getMe().then(data => {
        var _rec10 = new _powerAssertRecorder();

        t.true(_rec10._expr(_rec10._capt(_rec10._capt(data, 'arguments/0/left') && _rec10._capt(_rec10._capt(_rec10._capt(data, 'arguments/0/right/left/object').id, 'arguments/0/right/left') == _rec10._capt(_rec10._capt(bot, 'arguments/0/right/right/object').id, 'arguments/0/right/right'), 'arguments/0/right'), 'arguments/0'), {
            content: 't.true(data && data.id == bot.id)',
            filepath: 'index.js',
            line: 160,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"LogicalExpression","operator":"&&","left":{"type":"Identifier","name":"data","range":[7,11]},"right":{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"data","range":[15,19]},"property":{"type":"Identifier","name":"id","range":[20,22]},"computed":false,"range":[15,22]},"right":{"type":"MemberExpression","object":{"type":"Identifier","name":"bot","range":[26,29]},"property":{"type":"Identifier","name":"id","range":[30,32]},"computed":false,"range":[26,32]},"range":[15,32]},"range":[7,32]}],"range":[0,33]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"data","range":[7,11]},{"type":{"label":"&&"},"value":"&&","range":[12,14]},{"type":{"label":"name"},"value":"data","range":[15,19]},{"type":{"label":"."},"range":[19,20]},{"type":{"label":"name"},"value":"id","range":[20,22]},{"type":{"label":"==/!="},"value":"==","range":[23,25]},{"type":{"label":"name"},"value":"bot","range":[26,29]},{"type":{"label":"."},"range":[29,30]},{"type":{"label":"name"},"value":"id","range":[30,32]},{"type":{"label":")"},"range":[32,33]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.sendMessage', t => {
    let str = '#hello_test';
    return bot.sendMessage(USER, str).then(re => {
        var _rec11 = new _powerAssertRecorder();

        t.true(_rec11._expr(_rec11._capt(_rec11._capt(_rec11._capt(re, 'arguments/0/left/object').text, 'arguments/0/left') == _rec11._capt(str, 'arguments/0/right'), 'arguments/0'), {
            content: 't.true(re.text == str)',
            filepath: 'index.js',
            line: 167,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"BinaryExpression","operator":"==","left":{"type":"MemberExpression","object":{"type":"Identifier","name":"re","range":[7,9]},"property":{"type":"Identifier","name":"text","range":[10,14]},"computed":false,"range":[7,14]},"right":{"type":"Identifier","name":"str","range":[18,21]},"range":[7,21]}],"range":[0,22]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"name"},"value":"re","range":[7,9]},{"type":{"label":"."},"range":[9,10]},{"type":{"label":"name"},"value":"text","range":[10,14]},{"type":{"label":"==/!="},"value":"==","range":[15,17]},{"type":{"label":"name"},"value":"str","range":[18,21]},{"type":{"label":")"},"range":[21,22]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

const sendMethods = {
    sendPhoto: {
        'url': 'https://telegram.org/img/t_logo.png',
        'buffer': fs.readFileSync(`${__dirname}/data/image.jpg`),
        'file system': `${__dirname}/data/image.jpg`
    },
    sendAudio: {
        'buffer': fs.readFileSync(`${__dirname}/data/audio.mp3`),
        'file system': `${__dirname}/data/audio.mp3`
    },
    sendDocument: {
        'buffer': fs.readFileSync(`${__dirname}/data/file.txt`),
        'file system': `${__dirname}/data/file.txt`
    },
    sendSticker: {
        'url': 'http://www.gstatic.com/webp/gallery/1.webp',
        'buffer': fs.readFileSync(`${__dirname}/data/sticker.webp`),
        'file system': `${__dirname}/data/sticker.webp`
    },
    sendVideo: {
        'buffer': fs.readFileSync(`${__dirname}/data/video.mp4`),
        'file system': `${__dirname}/data/video.mp4`
    },
    sendVoice: {
        'buffer': fs.readFileSync(`${__dirname}/data/voice.m4a`),
        'file system': `${__dirname}/data/voice.m4a`
    }
};

for (let method in sendMethods) {
    let data = sendMethods[method];
    test(`bot.${method}`, t => {
        let promise = Promise.resolve();
        for (let name in data) {
            promise = promise.then(() => {
                return bot[method](USER, data[name]).then(re => {
                    var _rec12 = new _powerAssertRecorder();

                    return t.true(_rec12._expr(_rec12._capt(!_rec12._capt(!_rec12._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
                        content: 't.true(!!re)',
                        filepath: 'index.js',
                        line: 206,
                        ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
                        tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
                        visitorKeys: _powerAssertVisitorKeys
                    }));
                });
            });
        }
        return promise;
    });
}

test('bot.sendLocation', t => {
    let loc = [37.641401, -115.783262];
    return bot.sendLocation(USER, loc).then(re => {
        var _rec13 = new _powerAssertRecorder();

        t.true(_rec13._expr(_rec13._capt(!_rec13._capt(!_rec13._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
            content: 't.true(!!re)',
            filepath: 'index.js',
            line: 216,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
        t.deepEqual(re.location, { latitude: loc[0], longitude: loc[1] });
    });
});

test('bot.sendVenue', t => {
    return bot.sendVenue(USER, [56.9713962, 23.9890801], 'A', 'B').then(re => {
        var _rec14 = new _powerAssertRecorder();

        t.truthy(_rec14._expr(_rec14._capt(_rec14._capt(re, 'arguments/0/object').venue, 'arguments/0'), {
            content: 't.truthy(re.venue)',
            filepath: 'index.js',
            line: 223,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"re","range":[9,11]},"property":{"type":"Identifier","name":"venue","range":[12,17]},"computed":false,"range":[9,17]}],"range":[0,18]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"venue","range":[12,17]},{"type":{"label":")"},"range":[17,18]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.sendContact', t => {
    return bot.sendContact(USER, '112', 'First', 'Last').then(re => {
        var _rec15 = new _powerAssertRecorder();

        t.truthy(_rec15._expr(_rec15._capt(_rec15._capt(re, 'arguments/0/object').contact, 'arguments/0'), {
            content: 't.truthy(re.contact)',
            filepath: 'index.js',
            line: 229,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"truthy","range":[2,8]},"computed":false,"range":[0,8]},"arguments":[{"type":"MemberExpression","object":{"type":"Identifier","name":"re","range":[9,11]},"property":{"type":"Identifier","name":"contact","range":[12,19]},"computed":false,"range":[9,19]}],"range":[0,20]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"name"},"value":"truthy","range":[2,8]},{"type":{"label":"("},"range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":"."},"range":[11,12]},{"type":{"label":"name"},"value":"contact","range":[12,19]},{"type":{"label":")"},"range":[19,20]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.sendAction', t => {
    return bot.sendAction(USER, 'typing').then(re => {
        var _rec16 = new _powerAssertRecorder();

        t.true(_rec16._expr(_rec16._capt(!_rec16._capt(!_rec16._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
            content: 't.true(!!re)',
            filepath: 'index.js',
            line: 235,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.editMessageText', t => {
    return bot.sendMessage(USER, 'text').then(re => {
        const chatId = USER;
        const messageId = re.message_id;
        return bot.editMessageText({ chatId, messageId }, 'text OK');
    }).then(re => {
        var _rec17 = new _powerAssertRecorder();

        return t.true(_rec17._expr(_rec17._capt(!_rec17._capt(!_rec17._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
            content: 't.true(!!re)',
            filepath: 'index.js',
            line: 244,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.editMessageCaption', t => {
    const photo = 'https://telegram.org/img/tl_card_destruct.gif';
    return bot.sendPhoto(USER, photo, { caption: 'caption' }).then(re => {
        const chatId = USER;
        const messageId = re.message_id;
        return bot.editMessageCaption({ chatId, messageId }, 'caption OK');
    }).then(re => {
        var _rec18 = new _powerAssertRecorder();

        return t.true(_rec18._expr(_rec18._capt(!_rec18._capt(!_rec18._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
            content: 't.true(!!re)',
            filepath: 'index.js',
            line: 253,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

test('bot.editMessageReplyMarkup', t => {
    let replyMarkup = bot.inlineKeyboard([[bot.inlineButton('test', { callback: 1 })]]);
    return bot.sendMessage(USER, 'markup', { replyMarkup }).then(re => {
        const chatId = USER;
        const messageId = re.message_id;
        replyMarkup = bot.inlineKeyboard([[bot.inlineButton('OK', { callback: 2 })]]);
        return bot.editMessageReplyMarkup({ chatId, messageId }, replyMarkup);
    }).then(re => {
        var _rec19 = new _powerAssertRecorder();

        return t.true(_rec19._expr(_rec19._capt(!_rec19._capt(!_rec19._capt(re, 'arguments/0/argument/argument'), 'arguments/0/argument'), 'arguments/0'), {
            content: 't.true(!!re)',
            filepath: 'index.js',
            line: 265,
            ast: '{"type":"CallExpression","callee":{"type":"MemberExpression","object":{"type":"Identifier","name":"t","range":[0,1]},"property":{"type":"Identifier","name":"true","range":[2,6]},"computed":false,"range":[0,6]},"arguments":[{"type":"UnaryExpression","operator":"!","argument":{"type":"UnaryExpression","operator":"!","argument":{"type":"Identifier","name":"re","range":[9,11]},"prefix":true,"range":[8,11]},"prefix":true,"range":[7,11]}],"range":[0,12]}',
            tokens: '[{"type":{"label":"name"},"value":"t","range":[0,1]},{"type":{"label":"."},"range":[1,2]},{"type":{"label":"true"},"value":"true","range":[2,6]},{"type":{"label":"("},"range":[6,7]},{"type":{"label":"prefix"},"value":"!","range":[7,8]},{"type":{"label":"prefix"},"value":"!","range":[8,9]},{"type":{"label":"name"},"value":"re","range":[9,11]},{"type":{"label":")"},"range":[11,12]}]',
            visitorKeys: _powerAssertVisitorKeys
        }));
    });
});

// Functions

function all(obj) {
    return Object.keys(obj).length;
}
//# sourceMappingURL=../node_modules/.cache/ava/9b8570167ad3326fa99f8b27d07433e6.js.map